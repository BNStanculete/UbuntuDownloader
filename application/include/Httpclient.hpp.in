// Copyright HVortex 2024.

#pragma once

#include <string>
#include <memory>

#include <boost/beast/core.hpp>
#include <boost/beast/http.hpp>
#include <boost/beast/version.hpp>

#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/connect.hpp>

#include "IHttpclient.hpp"

using tcp = boost::asio::ip::tcp;

using HttpResponse = http::response<http::dynamic_body>;
using HttpRequest = http::request<http::string_body>;

namespace downloader {

/**
 * @brief Basic HTTP Client
 * 
 * This class acts as a basic HTTP client, supporting only GET requests.
 */
class HttpClient : IHttpClient {
 public:
    virtual ~HttpClient() = default;

    explicit HttpClient(std::shared_ptr<asio::io_context> ioc):
        ioc_(ioc),
        resolver_(*ioc),
        stream_(*ioc) {}

    // --- Prevent copy & move construction ---

    explicit HttpClient(const HttpClient& other) = delete;
    explicit HttpClient(HttpClient&& other) = delete;

    // --- Prevent copy & move assignment

    HttpClient& operator= (const HttpClient& other) = delete;
    HttpClient& operator= (HttpClient&& other) = delete;

    /**
     * @brief Performs a GET request at the target address (host:80/url)
     * 
     * The function will attempt to resolve (host, 80) to a valid (IP, Port) address.
     * Upon successful resolve, a GET request will be sent and the response will be
     * returned.
     * 
     * @returns HttpResponse
     */
    HttpResponse GET(const std::string& host, const std::string& url);

 private:
    std::shared_ptr<asio::io_context> ioc_;

    tcp::resolver resolver_;

    beast::tcp_stream stream_;
    beast::flat_buffer buffer_;
    beast::error_code ec_;
};

}  // namespace downloader
